import java.util.Random;
//boolean hugged is set in jarvis share


/**
 * Class Jarvis models Jarvis on the board. Not visible. Moves every 800 milleseconds and lays traps every 
 * 6 moves. 
 * @author jessica oathoudt
 *
 */
public class Jarvis extends Mobile implements Runnable 
{
	/**
	 * instance variable moves - holds the number of moves jarvis has made
	 */
	private int numJarvisMoves = 0;
	
	/**
	 * Jarvis constructor. Takes board as a parameter
	 * @param board
	 */
	public Jarvis(Board board) 
	{
		//super board (calls the board for jarvis to move on)
		super(board);
	}
	
	/**
	 * this is the layTrap method
	 * if a trap is not placed and Jarvis has tried less spots than the ones that surround him, 
	 * then he lays a trap at x,y. If he can't lay a trap he waits 800 milliseconds then tries again.
	 */
	private void layTrap() 
	{
		//trapDown is only true when a trap is placed
		//initializing trapDown
		boolean trapDown = false;
		// numTries starts at 0
		int numTries = 0;
		//while a trap is not placed and numTries is less than 8
		while(!trapDown && numTries < 8) 
		{
			//the new direction will be based off what is randomly generated here
			int direction = new Random().nextInt(8);
			//finds where jarvis is on board
			//based on the direction lays a trap around jarvis
			//x is column
			int yCol = board.getColum(this);
			//y is row
			int xRow = board.getRow(this);
			
			//switch statement based on int direction
			switch(direction) 
			{
			case 0:
				//up
				xRow = xRow - 1;;
				break;
			case 1:
				//down
				xRow = xRow + 1;
				break;
			case 2:
				//right
				yCol = yCol + 1;
				break;
			case 3:
				//left
				yCol = yCol -1;
				break;
			case 4:
				//up left
				yCol = yCol-1;
				xRow = xRow -1;
				break;
			case 5:
				//up right
				yCol = yCol+1;
				xRow =xRow-1;
			case 6:
				//down left
				yCol=yCol-1;
				xRow = xRow+1;
				break;
			case 7:
				//down right
				yCol=yCol+1;
				xRow=xRow+1;
				break;
			}
			//if it can use one of these places^^^
			//lay the trap on the board
			//makes new Homework trap as placeElements boardable parameter!
			trapDown = board.placeElement(new HomeworkTrap(board), xRow, yCol);
			//add numTries
			numTries = numTries + 1;
			}
		}
	
	/**
	 * This randomly moves jarvis every 800 milliseconds and calls layTrap after every. Keeps track
	 * of how many times jarvis has tried to move and if he has moved
	 * 6 moves by Jarvis (layTrap())
	 */
	protected void move() 
	{
		//jarvis waits 800 milliseconds
		try 
		{
			Thread.sleep(800);
		} 
		catch (InterruptedException exp) 
		{
			System.err.println("Error on Jarvis moving every 800 milliseconds");
		}
		//similar thing as laytrap but for Jarvis moving
		//false to start (only true if it moved)
		boolean jarvisMove = false;
		//numTries starts at 0
		//this goes for how many around jarvis (8)
		int numTries = 0;
		
		//while jarvis hasn't moved and tried less than 8 times
		while(!jarvisMove && numTries <8) 
		{
			//int direction is randomly generated number
			int direction = new Random().nextInt(8);
			//switch based on this direction
			switch(direction) 
			{
			//based on int direction, jarvis moves
			//cases are the random numbers generated by direction
			case 0:
				//if jarvis can move in that direction it will
				//be true
				//if he can't, it will be false
				jarvisMove = board.move(Direction.UP, this);
				break;
			case 1:
				jarvisMove = board.move(Direction.DOWN, this);
				break;
			case 2:
				jarvisMove = board.move(Direction.RIGHT, this);
			case 3:
				jarvisMove = board.move(Direction.LEFT, this);
				break;
			case 4:
				jarvisMove = board.move(Direction.UP_LEFT, this);
				break;
			case 5:
				jarvisMove = board.move(Direction.UP_RIGHT, this);
				break;
			case 6:
				jarvisMove = board.move(Direction.DOWN_LEFT, this);
				break;
			case 7:
				jarvisMove = board.move(Direction.DOWN_RIGHT, this);
				break;
				//if it can't do any of these
			default:
				//jarvis waits 800 milliseconds and tries again
				//just go back to top of loop
				break;
			}
			
			//numTries increases
			numTries = numTries + 1;
		}
		//moves increases after Jarvis moves
		this.numJarvisMoves = this.numJarvisMoves+1;
		
		//this is where i would lay a trap after 6 moves by jarvis
		//if number of moves divided by 6 = 0
		if(this.numJarvisMoves % 6 == 0) 
		{
			//lay a trap
			layTrap();
		}
	}
	
	/**
	 * Calls Jarvis move function endlessly
	 */
	public void run() 
	{
		//no hug
		while(!board.beenHugged()) 
		{
		//jarvis moves every 800
		move();
		}
	}
	
	/**
	 * Jarvis is not visible
	 * @return boolean - false
	 */
	@Override
	public boolean isVisible() 
	{
		return false;
	}
	
	/**
	 * Checks if something can share with Jarvis. If player shares, game is won. Other wise its false. HWtrap will
	 * be false.
	 * @param elem
	 * @return boolean - true if jarvis shares with player
	 */
	public boolean share(Boardable elem) 
	{
		//if element is type Mobile (player/jarvis
		if(elem instanceof Mobile) 
		{
			//if element is type Player
			if(elem instanceof Player) 
			{
				//if a player shares spot with jarvis
				this.board.setHugged(true);
				//winning message
				System.out.println("\nYou have hugged the angry Jarvis!");
			}
			//can share with any mobile
			return false;
		}
		//else false
		return false;
	}
	
	/**
	 * String representation of Jarvis. Not visible unless in a visible cell
	 */
	public String toString() 
	{
		String ret="?";
		return ret;
	}
}
